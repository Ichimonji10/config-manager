// Package controllers provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package controllers

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/pkg/errors"
)

// Account defines model for Account.
type Account string

// AccountState defines model for AccountState.
type AccountState struct {
	Account *Account `json:"account,omitempty"`
	Id      *StateID `json:"id,omitempty"`
	Label   *Label   `json:"label,omitempty"`
	State   *State   `json:"state,omitempty"`
}

// Initiator defines model for Initiator.
type Initiator string

// Label defines model for Label.
type Label string

// State defines model for State.
type State struct {
	AdditionalProperties map[string]string `json:"-"`
}

// StateArchive defines model for StateArchive.
type StateArchive struct {
	Account   *Account   `json:"account,omitempty"`
	CreatedAt *Timestamp `json:"created_at,omitempty"`
	Id        *StateID   `json:"id,omitempty"`
	Initiator *Initiator `json:"initiator,omitempty"`
	Label     *Label     `json:"label,omitempty"`
	State     *State     `json:"state,omitempty"`
}

// StateArchives defines model for StateArchives.
type StateArchives []StateArchive

// StateID defines model for StateID.
type StateID string

// Timestamp defines model for Timestamp.
type Timestamp time.Time

// Limit defines model for Limit.
type Limit int

// Offset defines model for Offset.
type Offset int

// StateIDParam defines model for StateIDParam.
type StateIDParam StateID

// GetStatesParams defines parameters for GetStates.
type GetStatesParams struct {

	// Maximum number of results to return
	Limit *Limit `json:"limit,omitempty"`

	// Indicates the starting position of the query relative to the complete set of items that match the query
	Offset *Offset `json:"offset,omitempty"`
}

// UpdateStatesJSONBody defines parameters for UpdateStates.
type UpdateStatesJSONBody State

// UpdateStatesJSONRequestBody defines body for UpdateStates for application/json ContentType.
type UpdateStatesJSONRequestBody UpdateStatesJSONBody

// Getter for additional properties for State. Returns the specified
// element and whether it was found
func (a State) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for State
func (a *State) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for State to handle AdditionalProperties
func (a *State) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for State to handle AdditionalProperties
func (a State) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
