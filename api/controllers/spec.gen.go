// Package controllers provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package controllers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get archive of state changes for requesting account
	// (GET /states)
	GetStates(ctx echo.Context, params GetStatesParams) error
	// Update and roll out configuration state for requesting account
	// (POST /states)
	UpdateStates(ctx echo.Context) error
	// Get the current state for requesting account
	// (GET /states/current)
	GetCurrentState(ctx echo.Context) error
	// Get single state change for requesting account
	// (GET /states/{id})
	GetStateById(ctx echo.Context, id StateIDParam) error
	// Get ansible playbook for current state configuration
	// (GET /states/{id}/playbook)
	GetPlaybookById(ctx echo.Context, id StateIDParam) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetStates converts echo context to params.
func (w *ServerInterfaceWrapper) GetStates(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStatesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStates(ctx, params)
	return err
}

// UpdateStates converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateStates(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateStates(ctx)
	return err
}

// GetCurrentState converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentState(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCurrentState(ctx)
	return err
}

// GetStateById converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id StateIDParam

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateById(ctx, id)
	return err
}

// GetPlaybookById converts echo context to params.
func (w *ServerInterfaceWrapper) GetPlaybookById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id StateIDParam

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPlaybookById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/states", wrapper.GetStates)
	router.POST(baseURL+"/states", wrapper.UpdateStates)
	router.GET(baseURL+"/states/current", wrapper.GetCurrentState)
	router.GET(baseURL+"/states/:id", wrapper.GetStateById)
	router.GET(baseURL+"/states/:id/playbook", wrapper.GetPlaybookById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXTW/jNhD9KwTbozZytt2LbpttURhNsUG3PRWLYiyObG7FjwyHRoxA/70gaVsR5Hx1",
	"0xQ92RJnhm/eG85Qt7J1xjuLloNsbqUHAoOMlJ8utdGc/igMLWnP2lnZyF/gRptohI1mhSRcJwhD7DkI",
	"doKQI1lZSZ1MryPSTlbSgkHZyD4HrGRoN2igRO4g9iybd4tKmhJYNm8X6Unb8nReSd755K8t4xpJDkMl",
	"P3ZdwBPollbpFhiD4A2KwECs7Vp4F3SySHDTQkYmCHtgvcWEPL1NbPTIKAJystSMJgUCFga43Yyu92To",
	"CqqTKd7NaXEyp08MjMsfrpIK88xCWhVA7SYh1got604jHaB44M2IRCtZScLrqAmVbJgi3kX1LWEnG/lN",
	"PRZAXVZDvYchh4Rp/zL5vG9bF23m3MDNJdo1b2RzXvI6Ph4zC0zaruVQHRxz3Fxm5DwSa8xhYQz7EKrD",
	"7kOVcntqCpXsYYX9Y/aX2Sile8D4aPSs2D5Vt/qCbYa2tJo1sKMUY0bE5QHLbOXIDSiVCxX6qwlLM4/Z",
	"1jnE+1IeL8FySwiM6k941Ok3bTAwGP9scfRduh7yGXl9dUnv8pqpzF3hSQEPaoxhgQh2cjzrKUznyCSS",
	"ZYz51M6kHvm9a62A8Q1rg3OXIVPbuXkT+eBsp9fCgIU1kghIW93mCJp7nBnISm6RQvFdnC3OzhMe59GC",
	"17KR3+VXVe49mZI6s53/rkt7TkUIafelko38CUsbCNlpnDZ/nGZzNKnLNBqqRw33k2H4nPpf8M6Gguft",
	"YpF+WmcZy0EA7/s0LLSz9ZeQcrx9Tos81kTme8rzx58TUd+XLadLF6DEr3gdMXCxOZ/bvI+8Sf29gBNG",
	"h5CmWEfOCBp9352Kv7SMZKEXn5C2SOJHIlfmS4jGAO2KDMdJ4jpRRku7AbvGIDpHh03SpjC2BO/CCU1/",
	"96kUj7LuXS+c2r0s36d4zgvCgC9T2iKqfA9ZoYgZ1nwMDv9iXUwm3VeVxT+WtqghwCpBru+FiyzafKhj",
	"0Wyv9n0qD9XhENdtJNpTct9h/lBMSsL/C2L/s/OWL5iFrqdLcKvV8Ggzvdgt1bP76eSy+WrN8mu0mzGa",
	"NOpx0r2eymnte9itnPvrIXKv9javwi/jDddbq852YPopuSem+wsxCDboVY/iwEamb1qkk96x/ybIhV5Y",
	"iNTLRm6YfWjquu1dVGeEagN81jpTg9d1ifBmf6Wot+nCMAXpyanYlg2qQ8wn+h6/4fL3z/B5+DsAAP//",
	"A0INV9UOAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
